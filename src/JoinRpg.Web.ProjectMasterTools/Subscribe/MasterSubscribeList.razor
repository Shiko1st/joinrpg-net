
@inject IGameSubscribeClient Client
@if (_model is null)
{
  <JoinLoadingMessage />
  return;
}

<div class="master-subscribe-list">
  <JoinTableSimple>
    <TableHeader>
        <th>Предмет подписки</th>
        <th>Виды операций</th>
        <th></th>
    </TableHeader>
    <TableBody>
      @foreach (var item in _model.Items)
      {
        <MasterSubscribeListRow Model="@item" OnRemoveCallback="OnRemoveRow" @key="@item.UserSubscriptionId" />
      }
      @foreach (var paymentType in _model.PaymentTypeNames)
      {
        <tr>
          <td title="Эту подписку нельзя настроить">Взносы/@paymentType</td>
          <td>
            <Label Variation="VariationStyleEnum.Success">
              Отмеченные взносы
            </Label>
          </td>
          <td></td>
        </tr>
      }
      <tr>
        <td title="Эту подписку нельзя настроить">Заявки, за которые ответственен</td>
        <td>
          <Label Variation="VariationStyleEnum.Success">
            Любые изменения
          </Label>
        </td>
        <td></td>
      </tr>
    </TableBody>
  </JoinTableSimple>

</div>
@code {
    private SubscribeListViewModel? _model;

    [Parameter]
    public SubscribeListViewModel? InitialModel { get; set; }

    [Parameter]
    public int MasterId { get; set; }

    [Parameter]
    public int ProjectId { get; set; }

    protected async override Task OnInitializedAsync()
    {
      if (InitialModel != null)
      {
        _model = InitialModel;
      }
      else
      {
        _model = await Client.GetSubscribeForMaster(ProjectId, MasterId);
      }
    }

    async Task OnRemoveRow(SubscribeListItemViewModel item)
    {
      _model!.Items.Remove(item);
      await Client.RemoveSubscription(ProjectId, item.UserSubscriptionId);
    }



}
